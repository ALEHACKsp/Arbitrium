#pragma once

#pragma region method enums
enum clientFrameStages
{
	FRAME_UNDEFINED = -1, // (haven't run any frames yet)
	START,

	// A network packet is being recieved
	NET_UPDATE_START,
	// Data has been received and we're going to start calling PostDataUpdate
	NET_UPDATE_POSTDATAUPDATE_START,
	// Data has been received and we've called PostDataUpdate on all data
	// recipients
	NET_UPDATE_POSTDATAUPDATE_END,
	// We've received all packets, we can now do interpolation, prediction,
	// etc..
	NET_UPDATE_END,

	// We're about to start rendering the scene
	RENDER_START,
	// We've finished rendering the scene.
	RENDER_END
};

enum buttonCode
{
	KEY_INVALID = 0x0,
	KEY_0 = 0x1,
	KEY_1 = 0x2,
	KEY_2 = 0x3,
	KEY_3 = 0x4,
	KEY_4 = 0x5,
	KEY_5 = 0x6,
	KEY_6 = 0x7,
	KEY_7 = 0x8,
	KEY_8 = 0x9,
	KEY_9 = 0xA,
	KEY_A = 0xB,
	KEY_B = 0xC,
	KEY_C = 0xD,
	KEY_D = 0xE,
	KEY_E = 0xF,
	KEY_F = 0x10,
	KEY_G = 0x11,
	KEY_H = 0x12,
	KEY_I = 0x13,
	KEY_J = 0x14,
	KEY_K = 0x15,
	KEY_L = 0x16,
	KEY_M = 0x17,
	KEY_N = 0x18,
	KEY_O = 0x19,
	KEY_P = 0x1A,
	KEY_Q = 0x1B,
	KEY_R = 0x1C,
	KEY_S = 0x1D,
	KEY_T = 0x1E,
	KEY_U = 0x1F,
	KEY_V = 0x20,
	KEY_W = 0x21,
	KEY_X = 0x22,
	KEY_Y = 0x23,
	KEY_Z = 0x24,
	KEY_PAD_0 = 0x25,
	KEY_PAD_1 = 0x26,
	KEY_PAD_2 = 0x27,
	KEY_PAD_3 = 0x28,
	KEY_PAD_4 = 0x29,
	KEY_PAD_5 = 0x2A,
	KEY_PAD_6 = 0x2B,
	KEY_PAD_7 = 0x2C,
	KEY_PAD_8 = 0x2D,
	KEY_PAD_9 = 0x2E,
	KEY_PAD_DIVIDE = 0x2F,
	KEY_PAD_MULTIPLY = 0x30,
	KEY_PAD_MINUS = 0x31,
	KEY_PAD_PLUS = 0x32,
	KEY_PAD_ENTER = 0x33,
	KEY_PAD_DECIMAL = 0x34,
	KEY_LBRACKET = 0x35,
	KEY_RBRACKET = 0x36,
	KEY_SEMICOLON = 0x37,
	KEY_APOSTROPHE = 0x38,
	KEY_BACKQUOTE = 0x39,
	KEY_COMMA = 0x3A,
	KEY_PERIOD = 0x3B,
	KEY_SLASH = 0x3C,
	KEY_BACKSLASH = 0x3D,
	KEY_MINUS = 0x3E,
	KEY_EQUAL = 0x3F,
	KEY_ENTER = 0x40,
	KEY_SPACE = 0x41,
	KEY_BACKSPACE = 0x42,
	KEY_TAB = 0x43,
	KEY_CAPSLOCK = 0x44,
	KEY_NUMLOCK = 0x45,
	KEY_ESCAPE = 0x46,
	KEY_SCROLLLOCK = 0x47,
	KEY_INSERT = 0x48,
	KEY_DELETE = 0x49,
	KEY_HOME = 0x4A,
	KEY_END = 0x4B,
	KEY_PAGEUP = 0x4C,
	KEY_PAGEDOWN = 0x4D,
	KEY_BREAK = 0x4E,
	KEY_LSHIFT = 0x4F,
	KEY_RSHIFT = 0x50,
	KEY_LALT = 0x51,
	KEY_RALT = 0x52,
	KEY_LCONTROL = 0x53,
	KEY_RCONTROL = 0x54,
	KEY_LWIN = 0x55,
	KEY_RWIN = 0x56,
	KEY_APP = 0x57,
	KEY_UP = 0x58,
	KEY_LEFT = 0x59,
	KEY_DOWN = 0x5A,
	KEY_RIGHT = 0x5B,
	KEY_F1 = 0x5C,
	KEY_F2 = 0x5D,
	KEY_F3 = 0x5E,
	KEY_F4 = 0x5F,
	KEY_F5 = 0x60,
	KEY_F6 = 0x61,
	KEY_F7 = 0x62,
	KEY_F8 = 0x63,
	KEY_F9 = 0x64,
	KEY_F10 = 0x65,
	KEY_F11 = 0x66,
	KEY_F12 = 0x67,
	KEY_MOUSE_1 = 0x6B,
	KEY_MOUSE_2 = 0x6C,
	KEY_MOUSE_3 = 0x6D,
	KEY_MOUSE_4 = 0x6E,
	KEY_MOUSE_5 = 0x6F
};

enum shouldTransmitState
{
	SHOULDTRANSMIT_START = 0,	// The entity is starting to be transmitted (maybe it entered the PVS).

	SHOULDTRANSMIT_END		// Called when the entity isn't being transmitted by the server.
							// This signals a good time to hide the entity until next time
							// the server wants to transmit its state.
};

// NOTE: All of these are commented out; NotifyShouldTransmit actually
// has all these in them. Left it as an enum in case we want to go back though
enum dataUpdateType
{
	DATA_UPDATE_CREATED = 0,	// indicates it was created +and+ entered the pvs
//	DATA_UPDATE_ENTERED_PVS,
DATA_UPDATE_DATATABLE_CHANGED,
//	DATA_UPDATE_LEFT_PVS,
//	DATA_UPDATE_DESTROYED,		// FIXME: Could enable this, but it's a little worrying
								// since it changes a bunch of existing code
};

enum chatFilters
{
	CHAT_FILTER_NONE = 0,
	CHAT_FILTER_JOINLEAVE = 1,
	CHAT_FILTER_NAMECHANGE = 2,
	CHAT_FILTER_PUBLICCHAT = 4,
	CHAT_FILTER_SERVERMSG = 8,
	CHAT_FILTER_TEAMCHANGE = 10,
	CHAT_FILTER_ACHIEVEMENT = 20
};

enum textColor
{
	COLOR_NORMAL = 1,
	COLOR_USEOLDCOLORS = 2,
	COLOR_PLAYERNAME = 3,
	COLOR_LOCATION = 4,
	COLOR_ACHIEVEMENT = 5,
	COLOR_AWARD = 6,
	COLOR_PENALTY = 7,
	COLOR_SILVER = 8,
	COLOR_GOLD = 9,
	COLOR_RARITY_FIRST = 10,
	COLOR_COMMON = COLOR_RARITY_FIRST,
	COLOR_UNCOMMON = 11,
	COLOR_RARE = 12,
	COLOR_MYTHICAL = 13,
	COLOR_LEGENDARY = 14,
	COLOR_ANCIENT = 15,
	COLOR_IMMORTAL = 16,
	COLOR_RARITY_LAST = COLOR_IMMORTAL,
	COLOR_MAX
};

enum classIds
{
	CAI_BASENPC,
	CAK47,
	CBASEANIMATING,
	CBASEANIMATINGOVERLAY,
	CBASEATTRIBUTABLEITEM,
	CBASEBUTTON,
	CBASECOMBATCHARACTER,
	CBASECOMBATWEAPON,
	CBASECSGRENADE,
	CBASECSGRENADEPROJECTILE,
	CBASEDOOR,
	CBASEENTITY,
	CBASEFLEX,
	CBASEGRENADE,
	CBASEPARTICLEENTITY,
	CBASEPLAYER,
	CBASEPROPDOOR,
	CBASETEAMOBJECTIVERESOURCE,
	CBASETEMPENTITY,
	CBASETOGGLE,
	CBASETRIGGER,
	CBASEVIEWMODEL,
	CBASEVPHYSICSTRIGGER,
	CBASEWEAPONWORLDMODEL,
	CBEAM,
	CBEAMSPOTLIGHT,
	CBONEFOLLOWER,
	CBRC4TARGET,
	CBREACHCHARGE,
	CBREACHCHARGEPROJECTILE,
	CBREAKABLEPROP,
	CBREAKABLESURFACE,
	CBUMPMINE,
	CBUMPMINEPROJECTILE,
	CC4,
	CCASCADELIGHT,
	CCHICKEN,
	CCOLORCORRECTION,
	CCOLORCORRECTIONVOLUME,
	CCSGAMERULESPROXY,
	CCSPLAYER,
	CCSPLAYERRESOURCE,
	CCSRAGDOLL,
	CCSTEAM,
	CDANGERZONE,
	CDANGERZONECONTROLLER,
	CDEAGLE,
	CDECOYGRENADE,
	CDECOYPROJECTILE,
	CDRONE,
	CDRONEGUN,
	CDYNAMICLIGHT,
	CDYNAMICPROP,
	CECONENTITY,
	CECONWEARABLE,
	CEMBERS,
	CENTITYDISSOLVE,
	CENTITYFLAME,
	CENTITYFREEZING,
	CENTITYPARTICLETRAIL,
	CENVAMBIENTLIGHT,
	CENVDETAILCONTROLLER,
	CENVDOFCONTROLLER,
	CENVGASCANISTER,
	CENVPARTICLESCRIPT,
	CENVPROJECTEDTEXTURE,
	CENVQUADRATICBEAM,
	CENVSCREENEFFECT,
	CENVSCREENOVERLAY,
	CENVTONEMAPCONTROLLER,
	CENVWIND,
	CFEPLAYERDECAL,
	CFIRECRACKERBLAST,
	CFIRESMOKE,
	CFIRETRAIL,
	CFISH,
	CFISTS,
	CFLASHBANG,
	CFOGCONTROLLER,
	CFOOTSTEPCONTROL,
	CFUNC_DUST,
	CFUNC_LOD,
	CFUNCAREAPORTALWINDOW,
	CFUNCBRUSH,
	CFUNCCONVEYOR,
	CFUNCLADDER,
	CFUNCMONITOR,
	CFUNCMOVELINEAR,
	CFUNCOCCLUDER,
	CFUNCREFLECTIVEGLASS,
	CFUNCROTATING,
	CFUNCSMOKEVOLUME,
	CFUNCTRACKTRAIN,
	CGAMERULESPROXY,
	CGRASSBURN,
	CHANDLETEST,
	CHEGRENADE,
	CHOSTAGE,
	CHOSTAGECARRIABLEPROP,
	CINCENDIARYGRENADE,
	CINFERNO,
	CINFOLADDERDISMOUNT,
	CINFOMAPREGION,
	CINFOOVERLAYACCESSOR,
	CITEM_HEALTHSHOT,
	CITEMCASH,
	CITEMDOGTAGS,
	CKNIFE,
	CKNIFEGG,
	CLIGHTGLOW,
	CMATERIALMODIFYCONTROL,
	CMELEE,
	CMOLOTOVGRENADE,
	CMOLOTOVPROJECTILE,
	CMOVIEDISPLAY,
	CPARADROPCHOPPER,
	CPARTICLEFIRE,
	CPARTICLEPERFORMANCEMONITOR,
	CPARTICLESYSTEM,
	CPHYSBOX,
	CPHYSBOXMULTIPLAYER,
	CPHYSICSPROP,
	CPHYSICSPROPMULTIPLAYER,
	CPHYSMAGNET,
	CPHYSPROPAMMOBOX,
	CPHYSPROPLOOTCRATE,
	CPHYSPROPRADARJAMMER,
	CPHYSPROPWEAPONUPGRADE,
	CPLANTEDC4,
	CPLASMA,
	CPLAYERPING,
	CPLAYERRESOURCE,
	CPOINTCAMERA,
	CPOINTCOMMENTARYNODE,
	CPOINTWORLDTEXT,
	CPOSECONTROLLER,
	CPOSTPROCESSCONTROLLER,
	CPRECIPITATION,
	CPRECIPITATIONBLOCKER,
	CPREDICTEDVIEWMODEL,
	CPROP_HALLUCINATION,
	CPROPCOUNTER,
	CPROPDOORROTATING,
	CPROPJEEP,
	CPROPVEHICLEDRIVEABLE,
	CRAGDOLLMANAGER,
	CRAGDOLLPROP,
	CRAGDOLLPROPATTACHED,
	CROPEKEYFRAME,
	CSCAR17,
	CSCENEENTITY,
	CSENSORGRENADE,
	CSENSORGRENADEPROJECTILE,
	CSHADOWCONTROL,
	CSLIDESHOWDISPLAY,
	CSMOKEGRENADE,
	CSMOKEGRENADEPROJECTILE,
	CSMOKESTACK,
	CSNOWBALL,
	CSNOWBALLPILE,
	CSNOWBALLPROJECTILE,
	CSPATIALENTITY,
	CSPOTLIGHTEND,
	CSPRITE,
	CSPRITEORIENTED,
	CSPRITETRAIL,
	CSTATUEPROP,
	CSTEAMJET,
	CSUN,
	CSUNLIGHTSHADOWCONTROL,
	CSURVIVALSPAWNCHOPPER,
	CTABLET,
	CTEAM,
	CTEAMPLAYROUNDBASEDRULESPROXY,
	CTEARMORRICOCHET,
	CTEBASEBEAM,
	CTEBEAMENTPOINT,
	CTEBEAMENTS,
	CTEBEAMFOLLOW,
	CTEBEAMLASER,
	CTEBEAMPOINTS,
	CTEBEAMRING,
	CTEBEAMRINGPOINT,
	CTEBEAMSPLINE,
	CTEBLOODSPRITE,
	CTEBLOODSTREAM,
	CTEBREAKMODEL,
	CTEBSPDECAL,
	CTEBUBBLES,
	CTEBUBBLETRAIL,
	CTECLIENTPROJECTILE,
	CTEDECAL,
	CTEDUST,
	CTEDYNAMICLIGHT,
	CTEEFFECTDISPATCH,
	CTEENERGYSPLASH,
	CTEEXPLOSION,
	CTEFIREBULLETS,
	CTEFIZZ,
	CTEFOOTPRINTDECAL,
	CTEFOUNDRYHELPERS,
	CTEGAUSSEXPLOSION,
	CTEGLOWSPRITE,
	CTEIMPACT,
	CTEKILLPLAYERATTACHMENTS,
	CTELARGEFUNNEL,
	CTEMETALSPARKS,
	CTEMUZZLEFLASH,
	CTEPARTICLESYSTEM,
	CTEPHYSICSPROP,
	CTEPLANTBOMB,
	CTEPLAYERANIMEVENT,
	CTEPLAYERDECAL,
	CTEPROJECTEDDECAL,
	CTERADIOICON,
	CTESHATTERSURFACE,
	CTESHOWLINE,
	CTESLA,
	CTESMOKE,
	CTESPARKS,
	CTESPRITE,
	CTESPRITESPRAY,
	CTEST_PROXYTOGGLE_NETWORKABLE,
	CTESTTRACELINE,
	CTEWORLDDECAL,
	CTRIGGERPLAYERMOVEMENT,
	CTRIGGERSOUNDOPERATOR,
	CVGUISCREEN,
	CVOTECONTROLLER,
	CWATERBULLET,
	CWATERLODCONTROL,
	CWEAPONAUG,
	CWEAPONAWP,
	CWEAPONBASEITEM,
	CWEAPONBIZON,
	CWEAPONCSBASE,
	CWEAPONCSBASEGUN,
	CWEAPONCYCLER,
	CWEAPONELITE,
	CWEAPONFAMAS,
	CWEAPONFIVESEVEN,
	CWEAPONG3SG1,
	CWEAPONGALIL,
	CWEAPONGALILAR,
	CWEAPONGLOCK,
	CWEAPONHKP2000,
	CWEAPONM249,
	CWEAPONM3,
	CWEAPONM4A1,
	CWEAPONMAC10,
	CWEAPONMAG7,
	CWEAPONMP5NAVY,
	CWEAPONMP7,
	CWEAPONMP9,
	CWEAPONNEGEV,
	CWEAPONNOVA,
	CWEAPONP228,
	CWEAPONP250,
	CWEAPONP90,
	CWEAPONSAWEDOFF,
	CWEAPONSCAR20,
	CWEAPONSCOUT,
	CWEAPONSG550,
	CWEAPONSG552,
	CWEAPONSG556,
	CWEAPONSHIELD,
	CWEAPONSSG08,
	CWEAPONTASER,
	CWEAPONTEC9,
	CWEAPONTMP,
	CWEAPONUMP45,
	CWEAPONUSP,
	CWEAPONXM1014,
	CWEAPONZONEREPULSOR,
	CWORLD,
	CWORLDVGUITEXT,
	DUSTTRAIL,
	MOVIEEXPLOSION,
	PARTICLESMOKEGRENADE,
	ROCKETTRAIL,
	SMOKETRAIL,
	SPOREEXPLOSION,
	SPORETRAIL
};

enum sendPropType
{
	SPT_DPT_FLOAT = 1,
	SPT_DPT_VECTOR_3D,
	SPT_DPT_VECTOR_2D,
	SPT_DPT_STRING,
	SPT_DPT_ARRAY, // an array of the base types (can't be of datatables).
	SPT_DPT_DATA_TABLE,
	SPT_DPT_INT64,
	SPT_DPT_NUM_SEND_PROP_TYPES
};

enum clcMessages
{
	CLC_CLIENT_INFO = 8,        // client info (table CRC etc)
	CLC_MOVE,              // [CUserCmd]
	CLC_VOICE_DATA,        // Voicestream data from a client
	CLC_BASE_LINE_ACK,      // client acknowledges a new baseline seqnr
	CLC_LISTEN_EVENTS,     // client acknowledges a new baseline seqnr
	CLC_RESPOND_CVAR_VALUE, // client is responding to a svc_GetCvarValue message.
	CLC_FILE_CRC_CHECK,     // client is sending a file's CRC to the server to be verified.
	CLC_LOADING_PROGRESS,  // client loading progress
	CLC_SPLIT_PLAYER_CONNECT,
	CLC_CLIENT_MESSAGE,
	CLC_CMD_KEY_VALUES,
	CLC_HLTV_REPLAY = 20
};

enum netChannelMessages
{
	NCM_GENERIC = 0,  // must be first and is default group
	NCM_LOCALPLAYER,  // bytes for local player entity update
	NCM_OTHERPLAYERS, // bytes for other players update
	NCM_ENTITIES,     // all other entity bytes
	NCM_SOUNDS,       // game sounds
	NCM_EVENTS,       // event messages
	NCM_TEMPENTS,     // temp entities
	NCM_USERMESSAGES, // user messages
	NCM_ENTMESSAGES,  // entity messages
	NCM_VOICE,        // voice data
	NCM_STRINGTABLE,  // a stringtable update
	NCM_MOVE,         // client move cmds
	NCM_STRINGCMD,    // string command
	NCM_SIGNON,       // various signondata
	NCM_TOTAL,        // must be last and is not a real group
};

#pragma endregion

#pragma region flags
enum cmdButtons
{
	IN_ATTACK = 1 << 0,
	IN_JUMP = 1 << 1,
	IN_DUCK = 1 << 2,
	IN_FORWARD = 1 << 3,
	IN_BACK = 1 << 4,
	IN_USE = 1 << 5,
	IN_MOVELEFT = 1 << 9,
	IN_MOVERIGHT = 1 << 10,
	IN_ATTACK2 = 1 << 11,
	IN_SCORE = 1 << 16,
	IN_BULLRUSH = 1 << 22
};

enum playerFlags
{
	FLAG_ONGROUND = (1 << 0),
	FLAG_DUCKING = (1 << 1),
	FLAG_ANIMDUCKING = (1 << 2),
	FLAG_WATERJUMP = (1 << 3),
	FLAG_ONTRAIN = (1 << 4),
	FLAG_INRAIN = (1 << 5),
	FLAG_FROZEN = (1 << 6),
	FLAG_ATCONTROLS = (1 << 7),
	FLAG_CLIENT = (1 << 8),
	FLAG_FAKECLIENT = (1 << 9),
	FLAG_INWATER = (1 << 10),
	FLAG_FLY = (1 << 11),
	FLAG_SWIM = (1 << 12),
	FLAG_CONVEYOR = (1 << 13),
	FLAG_NPC = (1 << 14),
	FLAG_GODMODE = (1 << 15),
	FLAG_NOTARGET = (1 << 16),
	FLAG_ANIMTARGET = (1 << 17),
	FLAG_PARTIALGROUND = (1 << 18),
	FLAG_STATICPROP = (1 << 19),
	FLAG_GRAPHED = (1 << 20),
	FLAG_GRENADE = (1 << 21),
	FLAG_STEPMOVEMENT = (1 << 22),
	FLAG_DONTTOUCH = (1 << 23),
	FLAG_BASEVELOCITY = (1 << 24),
	FLAG_WORLDBRUSH = (1 << 25),
	FLAG_OBJECT = (1 << 26),
	FLAG_KILLME = (1 << 27),
	FLAG_ONFIRE = (1 << 28),
	FLAG_DISSOLVING = (1 << 29),
	FLAG_TRANSRAGDOLL = (1 << 30),
	FLAG_UNBLOCKABLE_BY_PLAYER = (1 << 31)
};

enum moveTypes
{
	MOVETYPE_NONE = 0,
	MOVETYPE_ISOMETRIC,
	MOVETYPE_WALK,
	MOVETYPE_STEP,
	MOVETYPE_FLY,
	MOVETYPE_FLYGRAVITY,
	MOVETYPE_VPHYSICS,
	MOVETYPE_PUSH,
	MOVETYPE_NOCLIP,
	MOVETYPE_LADDER,
	MOVETYPE_OBSERVER,
	MOVETYPE_CUSTOM,
	MOVETYPE_LAST = MOVETYPE_CUSTOM,
	MOVETYPE_MAX_BITS = 4
};
#pragma endregion

#pragma region helpers
enum teamIds
{
	TID_NONE = 0,
	TID_SPECTATOR = 1,
	TID_TERRORIST = 2,
	TID_COUNTER_TERRORIST = 3
};

enum observerModes
{
	OM_MODE_NONE = 0,
	OM_MODE_DEATHCAM,
	OM_MODE_FREEZECAM,
	OM_MODE_FIXED,
	OM_MODE_IN_EYE,
	OM_MODE_CHASE,
	OM_MODE_ROAMING,
};
#pragma endregion